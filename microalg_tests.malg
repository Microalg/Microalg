(setq !testing T)
(setq tests
        (list
            '(= "0.4.07" version)
            # Affichage
            '(= "Bonjour tout le monde !" (prog (Afficher "Bonjour tout le monde !") *LastStdOut))
            '(= "" (prog (Afficher "") *LastStdOut))
            '(= "Deux" (prog (Afficher "Un") (Afficher "Deux") *LastStdOut))
            '(= "Commande `Afficher`." (prog (setq *LastStdOut "") (Afficher Afficher) *LastStdOut))
            '(= "Rien" (prog (setq *LastStdOut "") (Afficher Rien) *LastStdOut))
            '(= "Vrai" (prog (setq *LastStdOut "") (Afficher Vrai) *LastStdOut))
            '(= "Faux" (prog (setq *LastStdOut "") (Afficher Faux) *LastStdOut))
            # Afficher ne doit évaluer qu’une fois
            '(let (x NIL) (= 1 (prog (setq x 0) (Afficher (setq x (+ x 1))) x)))
            # Concaténation
            '(= "" (Concatener))
            '(= "" (Concatener ""))
            '(= "" (Concatener "" ""))
            '(= "hello" (Concatener "hello"))
            '(= "hello world" (Concatener "hello " "world"))
            '(= "Salut tout le monde!" (Concatener "Salut " "tout " "le " "monde!"))
            '(= "hello world" (prog (Afficher (Concatener "hello " "world")) *LastStdOut))
            '(= "àéèîïôü" (Concatener "à" "é" "è" "î" "ï" "ô" "ü" ))
            '(= "(Liste)" (!text (Concatener (Liste))))
            '(= "(Liste 1 2 3)" (!text (Concatener (Liste 1 2 3))))
            '(= "(Liste 1 2)" (!text (Concatener (Liste 1 2) (Liste))))
            '(= "(Liste 1 2 3 4)" (!text (Concatener (Liste 1 2) (Liste 3 4))))
            '(= "(Liste 1 2 3 4 5 6)" (!text (Concatener (Liste 1 2) (Liste 3 4) (Liste 5 6))))
            # simple éval
            '(let (x 0) (= 1 (prog (Concatener (prog (setq x (+ x 1)) "")) x)))
            # Gestion des variables
            # Déclarer
            '(let (x NIL) (= 0 (prog (setq x 0) x)))
            '(let (x NIL) (= "nombre" (prog (Declarer x De_type "nombre") (Type x))))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL) (= Rien (prog (Declarer x De_type "nombre") x)))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            # Affectation en mode strict
            '(let (x NIL) (= 0 (prog (Declarer x De_type "nombre") (Affecter_a x 0) x)))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL y NIL) (= 3 (prog (Declarer x y De_type "nombre")
                                           (Affecter_a x 1) (Affecter_a y 2) (+ x y))))
            '(prog (put 'x 'type NIL) (put 'y 'type NIL) (on !sans_declaration) T)
            # Affectations en mode souple
            '(let (x NIL) (= 0 (prog (Affecter_a x 0) x)))
            '(let (x NIL) (= 0 (prog (Affecter_a x (+ 0 0)) x)))
            '(prog (put 'x 'type NIL) T)
            '(let (x NIL) (= 1 (prog (Affecter_a x 0) (Affecter_a x (+ x 1)) x)))
            '(prog (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Affecter_a x "salut") x)))
            (put 'x 'type NIL)
            '(let (x NIL) (= "" (prog (Affecter_a x "") x)))
            # Affectation à un élément d’une variable de type liste ou texte
            '(let (x NIL) (= "salut" (prog (Affecter_a x "saluz") (Affecter_a x "t" En_position 5) x)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "salut" (prog (Affecter_a x "saluz") (Affecter_a x "t" En_position (+ 2 3)) x)))
            '(or (put 'x 'type NIL) T)
            # Types et conversions
            '(= "texte" (Type "bonjour"))
            '(= "texte" (Type ""))
            '(= "texte" (Type "0"))
            '(= "nombre" (Type 0))
            '(= "booleen" (Type Vrai))
            '(= "booleen" (Type Faux))
            '(= "liste" (Type (Liste)))
            '(= "0" (Texte "0"))
            '(= "0" (Texte 0))
            '(= 0 (Nombre 0))
            '(= 0 (Nombre "0"))
            '(= "Vrai" (Texte Vrai))
            '(= "Faux" (Texte Faux))
            '(= "Rien" (Texte Rien))
            '(= "(Liste)" (Texte (Liste)))
            '(= "(Liste 2 4 6)" (Texte (Liste 2 4 6)))
            # D’abord en mode strict
            '(let (x NIL) (= "texte" (prog (Declarer x De_type "texte") (Affecter_a x "bonjour") (Type x))))
            '(or (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL) (= "texte" (prog (Declarer x De_type "texte") (Affecter_a x "") (Type x))))
            '(or (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL) (= "nombre" (prog (Declarer x De_type "nombre") (Affecter_a x 0) (Type x))))
            '(or (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL) (= "booleen" (prog (Declarer x De_type "booleen") (Affecter_a x Vrai) (Type x))))
            '(or (put 'x 'type NIL) (on !sans_declaration) T)
            '(let (x NIL) (= "booleen" (prog (Declarer x De_type "booleen") (Affecter_a x Faux) (Type x))))
            '(or (put 'x 'type NIL) (on !sans_declaration) T)
            # Puis en mode souple
            '(let (x NIL) (= "texte" (prog (Affecter_a x "bonjour") (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "texte" (prog (Affecter_a x "") (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "nombre" (prog (Affecter_a x 0) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Affecter_a x Vrai) (Type x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "booleen" (prog (Affecter_a x Faux) (Type x))))
            '(or (put 'x 'type NIL) T)
            # Manipulations de texte
            '(= 0 (Longueur ""))
            '(= 5 (Longueur "salut"))
            '(= Vrai (Vide? ""))
            '(= Faux (Vide? "pas vide"))
            '(= "a" (Nieme "salut" 2))
            '(= "t" (Nieme "salut" 5))
            '(= "a" (Nieme "salut" (+ 1 1)))
            '(= "s" (Tete "salut"))
            '(= "alut" (Queue "salut"))
            '(= "x" (Tete "x"))
            '(= "" (Queue "x"))
            # Structure conditionnelle
            '(= 1 (Si Vrai Alors 1 Sinon 0))
            '(= 0 (Si Faux Alors 1 Sinon 0))
            '(= Rien (Si Faux Alors 1))
            '(= 1 (Si Vrai Alors (setq x 0) (setq x (+ x 1))))
            '(= 1 (Si Faux Alors Rien Sinon (setq x 0) (setq x (+ x 1))))
            '(or (setq x NIL) T)
            # Opérations mathématiques
            '(= 1 (^ 2 0))
            '(= 8 (^ 2 3))
            '(= 4 (Somme 2 2))
            '(= 1 (Diff 3 2))
            '(= 6 (Produit 2 3))
            '(= 3 (Quotient 6 2))
            '(= 2 (Reste 23 7))
            '(= 8 (Puissance 2 3))
            # Opérations logiques
            '(= Vrai (Non Faux))
            '(= Faux (Non Vrai))
            '(= Faux (Et Faux Faux))
            '(= Faux (Et Faux Vrai))
            '(= Faux (Et Vrai Faux))
            '(= Vrai (Et Vrai Vrai))
            '(= Faux (Ou Faux Faux))
            '(= Vrai (Ou Faux Vrai))
            '(= Vrai (Ou Vrai Faux))
            '(= Vrai (Ou Vrai Vrai))
            '(= Faux (Et Faux Faux Faux))
            '(= Faux (Et Vrai Faux Faux))
            '(= Vrai (Et Vrai Vrai Vrai))
            '(= Faux (Ou Faux Faux Faux))
            '(= Vrai (Ou Vrai Faux Faux))
            '(= Vrai (Ou Vrai Vrai Vrai))
            # Structures itératives
            '(= Rien (Tant_que Faux Faire (quit "bug dans Tant_que")))
            '(let (x 3) (= 0 (prog (Tant_que (=/ x 0) Faire (dec 'x)) x)))
            '(let (x 3) (= 0 (prog (Faire (dec 'x) Tant_que (=/ x 0)) x)))
            '(let (x 3) (= 2 (prog (Faire (dec 'x) Tant_que Faux) x)))
            '(let (x 3 y 0) (= 3 (prog (Tant_que (=/ x 0) Faire (dec 'x) (inc 'y)) y)))
            '(let (x 3 y 0) (= 3 (prog (Faire (dec 'x) (inc 'y) Tant_que (=/ x 0)) y)))
            '(= Rien (Repeter 0 Fois (quit "bug dans Repeter")))
            '(let (x 3) (= 0 (prog (Repeter 3 Fois (dec 'x)) x)))
            '(let (x 4) (= 0 (prog (Repeter 2 Fois (dec 'x) (dec 'x)) x)))
            '(let (x 0 y 0) (= "36" (prog (Repeter 3 Fois
                                            (inc 'x)
                                            (Repeter 2 Fois (inc 'y)))
                                          (pack x y))))
            '(let (x 3) (= 0 (prog (Repeter x Fois (dec 'x)) x)))
            # Commandes utilisateur
            '(let (f NIL) (= 14 (prog
                                  (Definir (f x) (Retourner (* 2 x)))
                                  (f 7) )
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *un auteur anonyme*."
                             (prog
                                  (Definir (f) (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Commande `f`, définie par *anonyme*."
                             (prog
                                  (Definir (f) "doc" "anonyme" (Retourner Rien))
                                  (Afficher f)
                                   *LastStdOut)
                          ))
            '(let (f NIL) (= "Aide pour `f` :  ^J`(f x y z)` : doc"
                             (prog
                                  (Definir (f x y z) "doc" (Retourner Rien))
                                  (Aide f))
                          ))
            # Prédicats
            '(= Vrai (= Vrai Vrai))
            '(= Faux (= Vrai Faux))
            '(= Faux (=/ Vrai Vrai))
            '(= Vrai (=/ Vrai Faux))
            '(= Vrai (= "Vrai" "Vrai"))
            '(= Faux (= "Vrai" "Faux"))
            '(= Faux (=/ "Vrai" "Vrai"))
            '(= Vrai (=/ "Vrai" "Faux"))
            '(= Faux (= Vrai "Vrai"))
            '(= Faux (= Faux "Faux"))
            '(= Faux (< 0 0))
            '(= Vrai (< 0 1))
            '(= Faux (< 1 0))
            '(= Vrai (<= 0 0))
            '(= Vrai (<= 0 1))
            '(= Faux (<= 1 0))
            '(= Faux (> 0 0))
            '(= Faux (> 0 1))
            '(= Vrai (> 1 0))
            '(= Vrai (>= 0 0))
            '(= Faux (>= 0 1))
            '(= Vrai (>= 1 0))
            '(= Vrai (= "texte" (Type "0")))
            '(let (x NIL) (= Vrai (prog (Declarer x De_type "texte") (Affecter_a x "0") (= "texte" (Type x)))))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            '(= Faux (= "texte" (Type 0)))
            '(let (x NIL) (= Faux (prog (Declarer x De_type "nombre") (Affecter_a x 0) (= "texte" (Type x)))))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            '(= Vrai (= "texte" (Type "")))
            '(let (x NIL) (= Vrai (prog (Declarer x De_type "texte") (Affecter_a x "") (= "texte" (Type x)))))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            '(= Faux (= "texte" (Type (Liste))))
            '(let (x NIL) (= Faux (prog (Declarer x De_type "liste") (Affecter_a x (Liste)) (= "texte" (Type x)))))
            '(prog (put 'x 'type NIL) (on !sans_declaration) T)
            # Manipulations de listes
            '(let (x NIL) (= "(Liste 2 4 6)" (prog (Declarer x De_type "liste") (Affecter_a x (Liste 2 4 0)) (Affecter_a x 6 En_position 3) (!text x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "(Liste (Liste 1))" (prog (Declarer x De_type "liste") (Affecter_a x (Liste (Liste 0))) (Affecter_a (Nieme x 1) 1 En_position 1) (!text x))))
            '(or (put 'x 'type NIL) T)
            '(= "liste" (Type (Liste)))
            '(= "(Liste)" (prog (Afficher (Liste)) *LastStdOut))
            '(= "(Liste Rien)" (prog (Afficher (Liste Rien)) *LastStdOut))
            '(= "(Liste \"\")" (prog (Afficher (Liste "")) *LastStdOut))
            '(= "(Liste 1 2 3)" (prog (Afficher (Liste 1 2 3)) *LastStdOut))
            '(let (x NIL) (= "(Liste 1 2 3)" (prog (Declarer x De_type "nombre") (Affecter_a x 1) (Afficher (Liste x 2 3)) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 2 (Liste 3 4))" (prog (Afficher (Liste 1 2 (Liste 3 4))) *LastStdOut))
            '(let (x NIL) (= "(Liste 1 2 (Liste 3 1))" (prog (Declarer x De_type "nombre") (Affecter_a x 1) (Afficher (Liste x 2 (Liste 3 x))) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "(Liste 1 2 (Liste 3 4))" (prog (Declarer x De_type "liste") (Affecter_a x (Liste 3 4)) (Afficher (Liste 1 2 x)) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= "(Liste \"bonjour\")" (prog (Declarer x De_type "liste") (Affecter_a x (Liste "bonjour")) (Afficher x) *LastStdOut)))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 2 (Liste 3 (Liste 4 5)))" (prog (Afficher (Liste 1 2 (Liste 3 (Liste 4 5)))) *LastStdOut))
            '(or (put 'x 'type NIL) T)
            '(= "(Liste 1 \"bonjour\" Vrai)" (prog (Afficher (Liste 1 "bonjour" Vrai)) *LastStdOut))
            '(= "(Liste \"bonjour\" (Liste \"salut\"))" (prog (Afficher (Liste "bonjour" (Liste "salut"))) *LastStdOut))
            # Manipulations de listes en // avec manipulations de texte
            '(= 0 (Longueur (Liste)))
            '(= 3 (Longueur (Liste 1 2 3)))
            '(= 3 (Longueur (Liste 1 2 (Liste 3 4))))
            '(= Vrai (Vide? (Liste)))
            '(= Faux (Vide? (Liste 1)))
            '(= 10 (Nieme (Liste 10 20) 1))
            '(= 20 (Nieme (Liste 10 20) 2))
            '(= 20 (Nieme (Liste 10 20) (+ 1 1)))
            '(= 10 (Tete (Liste 10 20 30)))
            '(= "(Liste 20 30)" (!text (Queue (Liste 10 20 30))))
            '(= 10 (Tete (Liste 10)))
            '(= "(Liste)" (!text (Queue (Liste 10))))
            '(let (x NIL) (= '(Rien "(Liste 1)") (prog (Declarer x De_type "liste") (Affecter_a x (Liste)) (list (Ajouter_a x 1) (!text x)))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(Rien "(Liste 1 2)") (prog (Declarer x De_type "liste") (Affecter_a x (Liste 1)) (list (Ajouter_a x 2) (!text x)))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(1 "(Liste)") (prog (Declarer x De_type "liste") (Affecter_a x (Liste 1)) (list (Retirer_de x) (!text x)))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(3 "(Liste 1 2)") (prog (Declarer x De_type "liste") (Affecter_a x (Liste 1 2 3)) (list (Retirer_de x) (!text x)))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(Rien "a") (prog (Declarer x De_type "texte") (Affecter_a x "") (list (Ajouter_a x "a") x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '(Rien "abcd") (prog (Declarer x De_type "texte") (Affecter_a x "abc") (list (Ajouter_a x "d") x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '("a" "") (prog (Declarer x De_type "texte") (Affecter_a x "a") (list (Retirer_de x) x))))
            '(or (put 'x 'type NIL) T)
            '(let (x NIL) (= '("d" "abc") (prog (Declarer x De_type "texte") (Affecter_a x "abcd") (list (Retirer_de x) x))))
            '(or (put 'x 'type NIL) T)
            # Pseudo-aléatoire
            '(= 0 (Entier@ 0 0))
            '(= 266 (prog (Initialiser@ 0) (Entier@ 0 1000)))
            '(= 0 (Nieme@ (Liste 0)))
            '(= "a" (Nieme@ "a"))
            # Fonctions maths
            '(=  866 (1000Cosinus  30))
            '(= -866 (1000Cosinus 150))
            '(= -866 (1000Cosinus 210))
            '(=  866 (1000Cosinus -30))
            '(=  866 (1000Cosinus 390))
            '(=  500 (1000Sinus  30))
            '(=  500 (1000Sinus 150))
            '(= -500 (1000Sinus 210))
            '(= -500 (1000Sinus -30))
            '(=  500 (1000Sinus 390))
            # Geler
            '(= 'x (Geler x))
        ) )

(let (Goods 0 Bads 0)
    (mapc
        '((BoolExpr)  # (println BoolExpr)
            (if (<> (eval BoolExpr) Faux)
                (if (<> 'or (car BoolExpr)) (inc 'Goods))
                (inc 'Bads)
                (println 'Error: BoolExpr 'Result:
                                     (if (<> 'let (car BoolExpr))
                                         (eval (caddr BoolExpr))
                                         (eval (caddr (caddr BoolExpr)))
                                     )
                )
            )
        ) tests)
    (println (pack "Tests: " (+ Goods Bads) ", Errors: " Bads))
    (if (= 0 Bads) (bye 0) (bye 1)) )
